#!/usr/bin/env python
"""
urgmsg_export_codes.py - script to generate sacfs_flexcode.py
Copyright 2010 - 2013 Michael Farrell <http://micolous.id.au/>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from distutils.version import StrictVersion
from argparse import ArgumentParser, FileType
import sqlite3

PREAMBLE = '''\
#!/usr/bin/env python
"""
sacfs_flexcode.py - Database of SAGRN FLEX Addresses (for pagers)
Copyright 2013 Michael Farrell <http://micolous.id.au/>

This file is automatically generated by a script (urgmsg_export_codes.py).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

'''

# do a check on sqlite version, because we need INSTR()
if StrictVersion(sqlite3.sqlite_version) < StrictVersion('3.7.15'):
	raise ImportError('libsqlite3 >= 3.7.15 is required, you have version %s' % sqlite3.sqlite_version)

def main(database, outfile):
	dbo = sqlite3.connect(database)
	cur = dbo.cursor()
	
	cur.execute("""
		SELECT address, name, substr(name, 0, instr(name, ' ')) org
		FROM flexcodes
		ORDER BY org, address
	""")
	
	outfile.write(PREAMBLE)
	outfile.write('CODES = {')
	lastorg = None
	for address, name, org in cur:
		if org != lastorg:
			lastorg = org
			outfile.write("\n## %s\n" % org)
		
		outfile.write("\t%d: %r,\n" % (address, str(name).strip()))
	
	outfile.write('}\n\n')
	
	
if __name__ == '__main__': 
	parser = ArgumentParser()
	
	parser.add_argument(
		'-d', '--database', required=True,
		help='Database file to read'
	)
	
	parser.add_argument(
		'-o', '--output', required=True, type=FileType('wb'),
		help='Output filename for sacfs_flexcode.py'
	)
	
	options = parser.parse_args()
	
	main(options.database, options.output)
