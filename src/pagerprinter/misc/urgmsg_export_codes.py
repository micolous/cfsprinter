#!/usr/bin/env python
"""
urgmsg_export_codes.py - script to generate sacfs_flexcode.py
Copyright 2010 - 2015 Michael Farrell <http://micolous.id.au/>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from argparse import ArgumentParser, FileType
from datetime import date
import sqlite3

PREAMBLE = '''\
#!/usr/bin/env python
"""
sacfs_flexcode.py - Database of SAGRN FLEX Addresses (for pagers)
Copyright 2010 - %d Michael Farrell <http://micolous.id.au/>

This file is automatically generated by a script (urgmsg_export_codes.py).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

''' % (date.today().year)


def _result_cmp(row1, row2):
	# Sort by org, then by address for results.
	address1, name1, org1 = row1
	address2, name2, org2 = row2
	o = cmp(org1, org2)
	if o == 0:
		o = cmp(address1, address2)

	return o


def main(database, outfile):
	dbo = sqlite3.connect(database)
	cur = dbo.cursor()

	cur.execute("""
		SELECT address, name
		FROM flexcodes
	""")

	outfile.write(PREAMBLE)
	outfile.write('CODES = {')
	lastorg = None

	results = []
	for result in cur:
		results.append([
			result[0],
			result[1],
			result[1].split(' ')[0]
		])

	results.sort(cmp=_result_cmp)

	for address, name, org in results:
		if org != lastorg:
			lastorg = org
			outfile.write("\n\t# %s\n" % org)

		outfile.write("\t%d: %r,\n" % (address, str(name).strip()))

	outfile.write('}\n\n')


if __name__ == '__main__':
	parser = ArgumentParser()

	parser.add_argument(
		'-d', '--database', required=True,
		help='Database file to read'
	)

	parser.add_argument(
		'-o', '--output', required=True, type=FileType('wb'),
		help='Output filename for sacfs_flexcode.py'
	)

	options = parser.parse_args()

	main(options.database, options.output)

